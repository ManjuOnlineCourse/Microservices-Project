package com.myproject.microservice.Controller;


import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.myproject.microservice.Entity.User;
import com.myproject.microservice.Exception.ResourceNotFoundException;
import com.myproject.microservice.Service.UserService;
import com.myproject.microservice.VO.ResponseTemplateVO;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import io.github.resilience4j.retry.annotation.Retry;
import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Mono;

@RestController
@RequestMapping("/api/user")
@Slf4j
public class UserController {


	

	@Autowired
	private UserService userService;

	
	int count =1;
	
	@PostMapping("/")
	public ResponseEntity<User> saveUser(@RequestBody User user) throws ResourceNotFoundException {

		log.info("saveUser from User Service");
		return new ResponseEntity<User>(userService.saveUser(user),HttpStatus.CREATED);
		
		
	}

	@GetMapping("/{userId}")
	@CircuitBreaker(name="ServiceA", fallbackMethod = "fallback")
	public ResponseTemplateVO getUserWithDepartment(@PathVariable Long userId) {
		System.out.println("couunt : " + count+1 +" date " + new Date());
		return userService.getUserWithDepartment(userId);
	}
	private Mono<String> fallback(Exception e) {
	    return Mono.just("Handled any other exception");
	}

	


}
